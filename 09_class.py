# Class
# - 객체: 실세계에 존재하는 것을 속성과 동작으로 표현하는 것
# - 속성: 변수
# - 동작: 함수

# 우체부 -> 객체로 표현

# Class: 우체부
#  ㄴ 변수1: 배달할 물품
#  ㄴ 변수2: 주소
#  ㄴ 함수1: 배달한다()
#  ㄴ 함수2: 회수한다()
#  ㄴ 함수3: 이동한다()

# web, app -> Java -> Spring(프레임워크), 상속공부를 무조건 해야함
# AI, 데이터 분석 -> python(자바처럼 클래스를 깊게 알 필요가 없다, ai나 데이터분석에서 코드를 재사용을 하지 않기 때문에)

# 1.Class: 객체의 설계 도면     : 힐스테이트 아파트 도면
# 2.객체생성: 인스턴스 생성!, 클래스를 사용해서 객체를 메모리에 올리는 것 : 힐스테이트 수완 짓기
#   ㄴ 생성자 함수() -> 모든 Class에는 반드시 하나 이상의 생성자 함수가 있어야 한다.
#   ㄴ 생성자 함수를 선언하지 않는 경우 자동으로 Default 생성자()) 함수가 만들어진다.
# 3.객체사용: 인스턴스 사용!, 객체가 가지고 있는 변수와 함수를 사용하는 것  : 힐스테이트 수완에 입주해서 살기, 힐스테이트 첨단
# *동일한 Class로 생성된 인스턴스들은 서로 다른 객체 인식


# 1. Class 
class Test: # 클래스이름은 파스칼표기법 사용
    # 생성자 함수
    # JAVA(This) == Python(self)
    # python은 클래스에 포함된 모든 함수들의 첫번째 매개변수로 self를 반드시 선언해야 한다.
    def __init__(self): #__언더바 두개: 파이썬에서 미리 정의된 특별한 함수,언더바언더바는 예약함수 이다
        print("Hello Class")
    #함수가 있으면 한줄인가 두줄인가 띄워야함
    # 일반함수    
    def print_name(self, name: str):
        print(f"Hello {name}")
        
# 2.객체 생성
# Test() -> 생성자 함수
# test -> 인스턴스
test = Test() #Test()가 생성자 함수이다, 인스턴스 생성

# 3.객체 사용
test.print_name("체리")