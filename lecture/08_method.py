# 함수(method, function)
# - 어떤 일을 수행하는 코드 묶음
# - 반복적으로 동작해야하는 일들!

# ** 함수 개발 가이드라인 **
# 1. 함수 이름 및 내용
# - 함수 이름에 함수의 역활과 의도 명확히 드러낼 것!
# - 함수 내용은 가능하면 짧게 작성(최소 기능 단위)

# 2. 함수의 역할
# - 하나의 함수에 유사한 역할의 코드만 작성
# - 하나의 함수는 한가지 기능만 명확히 정의

# ** 함수의 종류 **
# 1. 내장함수(built in function)
#   ㄴ python에서 기본적으로 제공하는 함수
#   ㄴ print(), type(), ...

# 2. 외장함수
#   ㄴ library: 다른 사람이 개발한 코드 묶음
#   ㄴ 다운로드 후 호출(import)
import pandas as pd # 판다스라는 라이브러리는 쓰겠다!!, as 앨리어스의 약자(이름을 pd라는 별명으로 쓰겠다)
pd.read_excel()

# 3. 사용자정의함수
#   ㄴ 개발자가 직접 만들어서 사용하는 함수

# ** 함수 이름 규칙 **
# snake_case(함수랑 변수는 스네이크지만, ..?가 파스칼 씀)

# ** 함수 정의 **
# 1. 기본 문법
# def 함수명(parameter1, parameter2, ...): *함수명은 스네이크쓰기
#   실행문
#   return 반환값 (=결과값)

# 2. def 키워드(define)
# 3. 함수의 입력값: (parameter1, ...)
# 4. 함수의 종료: return
# 5. 함수의 종료 및 반환: return 반환값
# 6. parameter와 return은 생략 가능

# 가. 함수 정의
def sum_two_value(x: int, y: int): # -> int: (타입힌트)
    n = x+y
    return n # 호출했던 곳으로 돌아감 하지만 돌아갈때 n이라는 값을 같이 가지고 가세요
    print("Hello") # 에러는 안나지만 실행이 안됨!!

print("Hello")
result = sum_two_value(5, 10) # 나. 함수 호출 # 여기가 호출했던 곳임 맨처음 함수호출문이지만 함수를 실행하고 돌아올 땐 리턴값이 변수가 됨
print(result)

# ** 인자, 매개변수, parameter **
# - 함수에 전달되는 입력값
# - 함수 정의문과 호출문의 인자 갯수는 동일
# - 인자가 여러개인 경우 순서대로 전달
# - default parameter <- x을 고정하고 싶을 때, 사용자 x나 y값을 안줬을 때
# def test(a, b, c=3):    (o)
# def test(a=3, b, c):    (x) 디폴트 파라미터 값을 줄땐 뒤에서부터! 채워야 함
# def test(a, b=15, c=3): (o)

# ** return **
# - 함수 종료하고 호출했던 곳으로 돌아감
# - 함수 블록 내에서 return문 다음에 코드가 와도되지마, 실행되지는 않음
# - return 반환값: 호출했던 곳으로 돌아감, 반환값을 전달(반환값을 가지고 가라) 추석에 엄마가 음식챙겨줌
# - return(리턴값만 있고 반환값이 없는 경우!): 호출했던 곳으로 돌아감, None값을 가지고 감                     추석에 엄마가 음식 안챙겨줌

# ** 타입 힌트(type hint) **
# - parameter와 return값의 타입을 미리 적어두기
# - 안적어도 실행하는데 문제 없음(단순 가독성)
# - 파이썬이 동적타입이라 실행하기 전까지는 무슨 타입인지 몰라서 사용

# ** 변수의 범위 **
# - 변수가 참조 가능한 코드상의 범위를 명시
# - 함수내의 변수는 자신이 속한 코드 블록이 종료되면 소멸(중요한 내용!!)
# - 특정 코드블록에서 선언된 변수를 "지역변수"
# - 가장 상단에 정의되어 프로그램 종료 전까지 유지되는 변수를 "전역변수"
# - 파이썬 코드 내에서는 동일한 이름의 변수명 사용불가
#   단, 지역변수와 전역변수의 경우 동일한 이름 사용 가능
#   -> 변수의 사용 범위가 다르기 때문
# - 동일한 이름의 지역변수와 전역변수가 존재하는 경우
#   가까운(지역변수) 변수가 우선순위 높음

# 전역변수 보통 상단에 정의, 프로그램이 아예 종료될 때에 소멸
num1 = 10 # 전역변수
num2 = 20 # 전역변수

# 블록문 내에 선언된 변수를 지역변수라고 함, 이 지역 내에서 쓸 수 있음
def test(num1): # 함수 정의
    num2 = 50 # 지역변수
    print(num1, num2) # 가장 가까운 num1, num2를 찾음 -> 지역변수 30, 50
    return # 코드블록이 종료되면 함수들이 전부 값이 소멸됨, RETURN시 함수를 종료하고 원래 있던 곳으로 돌아가세요: 임시값들은 싹 다 사라짐

test(30) # 함수 호출, 30은 지역변수 num1에 들어감
print(num1, num2) # 함수 블록 내에 있는 값은 이미 사라졌기 때문에 그래서 제일 가까운 전역변수 10, 20이 출력됨


# ** 가변 길이 인자 **
# - 전달되는 parameter의 개수가 고정적이지 않은 경우(일정하지 않은 경우)
# - print(), format() 함수 등
#
print(1)
print(1, 2)
print(1, 2, 3)

# 1) *args: tuple 형태로 전달, 별이 한개는 튜플로 전달
def test(*args): # 매개변수 이름은 자유롭게(동적으로) 바꿔도 됨, 단 관례적으로 args를 많이 씀
    for item in args:
        print(item)
test(10, 20, 30)

# 2) **kwargs: dict 형태로 전달, 별이 두개는 딕셔너리로 전달
def test2(**kwargs): # 매개변수 이름은 자유롭게 바꿔도 됨, 단 관례적으로 kwargs를 많이 씀
    for key, value in kwargs.items():
        print(key, value)
test2(a=1, b=2, c=3)