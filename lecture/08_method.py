# 함수(method, function)
# - 어떤 일을 수행하는 코드 묶음
# - 반복적으로 동작해야하는 일들!

# ** 함수 개발 가이드라인 **
# 1. 함수 이름 및 내용
# - 함수 이름에 함수의 역활과 의도 명확히 드러낼 것!
# - 함수 내용은 가능하면 짧게 작성(최소 기능 단위)

# 2. 함수의 역할
# - 하나의 함수에 유사한 역할의 코드만 작성
# - 하나의 함수는 한가지 기능만 명확히 정의

# ** 함수의 종류 **
# 1. 내장함수(built in function)
#   ㄴ python에서 기본적으로 제공하는 함수
#   ㄴ print(), type(), ...

# 2. 외장함수
#   ㄴ library: 다른 사람이 개발한 코드 묶음
#   ㄴ 다운로드 후 호출(import)
import pandas as pd # 판다스라는 라이브러리는 쓰겠다!!, as 앨리어스의 약자(이름을 pd라는 별명으로 쓰겠다)
pd.read_excel()

# 3. 사용자정의함수
#   ㄴ 개발자가 직접 만들어서 사용하는 함수

# ** 함수 이름 규칙 **
# snake_case(함수랑 변수는 스네이크지만, ..?가 파스칼 씀)

# ** 함수 정의 **
# 1. 기본 문법
# def 함수명(parameter1, parameter2, ...): *함수명은 스네이크쓰기
#   실행문
#   return 반환값 (=결과값)

# 2. def 키워드(define)
# 3. 함수의 입력값: (parameter1, ...)
# 4. 함수의 종료: return
# 5. 함수의 종료 및 반환: return 반환값
# 6. parameter와 return은 생략 가능

# 가. 함수 정의
def sum_two_value(x: int, y: int): # -> int: (타입힌트)
    n = x+y
    return n # 호출했던 곳으로 돌아감 하지만 돌아갈때 n이라는 값을 같이 가지고 가세요
    print("Hello") # 에러는 안나지만 실행이 안됨!!

print("Hello")
result = sum_two_value(5, 10) # 나. 함수 호출 # 여기가 호출했던 곳임 맨처음 함수호출문이지만 함수를 실행하고 돌아올 땐 리턴값이 변수가 됨
print(result)

# ** 인자, 매개변수, parameter **
# - 함수에 전달되는 입력값
# - 함수 정의문과 호출문의 인자 갯수는 동일
# - 인자가 여러개인 경우 순서대로 전달
# - default parameter <- x을 고정하고 싶을 때, 사용자 x나 y값을 안줬을 때
# def test(a, b, c=3):    (o)
# def test(a=3, b, c):    (x) 디폴트 파라미터 값을 줄땐 뒤에서부터! 채워야 함
# def test(a, b=15, c=3): (o)

# ** return **
# - 함수 종료하고 호출했던 곳으로 돌아감
# - 함수 블록 내에서 return문 다음에 코드가 와도되지마, 실행되지는 않음
# - return 반환값: 호출했던 곳으로 돌아감, 반환값을 전달(반환값을 가지고 가라) 추석에 엄마가 음식챙겨줌
# - return(리턴값만 있고 반환값이 없는 경우!): 호출했던 곳으로 돌아감, None값을 가지고 감                     추석에 엄마가 음식 안챙겨줌

# ** 타입 힌트(type hint) **
# - parameter와 return값의 타입을 미리 적어두기
# - 안적어도 실행하는데 문제 없음(단순 가독성)
# - 파이썬이 동적타입이라 실행하기 전까지는 무슨 타입인지 몰라서 사용

